---
title: "PEP Scheduling Report"
toc: true
theme: superhero
format: html
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)

library(tidyverse)
library(RPostgreSQL)
library(ggplot2)
library(scales)
library(ggpattern)
library(stringr)

# Connect to DB and get starting data
con <- RPostgreSQL::dbConnect(PostgreSQL(), 
                              dbname = Sys.getenv("pep_db"), 
                              host = Sys.getenv("pep_ip"), 
                              user = Sys.getenv("pep_admin"), 
                              password =  Sys.getenv("admin_pw"))

work <- RPostgreSQL::dbGetQuery(con, "SELECT * FROM administrative.summ_4scheduling") 

work_manuscripts <- RPostgreSQL::dbGetQuery(con, "SELECT * FROM administrative.summ_4scheduling_manuscripts") 
manuscripts <- unique(work_manuscripts$project_name) 

work_reports <- RPostgreSQL::dbGetQuery(con, "SELECT * FROM administrative.summ_4scheduling_reports") 
reports <- unique(work_reports$project_name) 

work_fy <- RPostgreSQL::dbGetQuery(con, "SELECT * FROM administrative.summ_4scheduling_fy") %>%
  mutate(performance_plan_element = factor(performance_plan_element, levels = c(0, 1, 2, 3, 4), labels=c("Project lead", "Element 1", "Element 2", "Element 3", "Element 4"), ordered = TRUE))

RPostgreSQL::dbDisconnect(con)

due_soon <- work %>%
  filter(planned_end_date > Sys.Date() & planned_end_date <= Sys.Date() + 10) %>%
  select(project_activity, role_name, staff, planned_end_date) %>%
  rename("Project" = project_activity,
         "Role" = role_name,
         "Staff" = staff,
         "Planned End Date" = planned_end_date)

overdue <- work %>%
  filter(planned_end_date <= Sys.Date()) %>%
  select(project_activity, role_name, staff, planned_end_date) %>%
  rename("Project" = project_activity,
         "Role" = role_name,
         "Staff" = staff,
         "Planned End Date" = planned_end_date)

planning <- work %>%
  filter(planned_start_date <= Sys.Date() + 150 & planned_end_date > Sys.Date() - 30) %>%
  mutate(adjusted_start = as.Date(ifelse(planned_start_date < Sys.Date() - 30, Sys.Date() - 30, planned_start_date), origin = '1970-01-01'),
         adjusted_end = as.Date(ifelse(planned_end_date > Sys.Date() + 150, Sys.Date() + 150, planned_end_date), origin = '1970-01-01'),
         ylab_staff = str_wrap(paste(project_activity, role_name, sep = ": "), width = 50),
         ylab_project = str_wrap(paste0(project_activity,": ", role_name, " (", staff, ")"), width = 50),
         work_intensity = ifelse(is.na(work_intensity), "Unknown", work_intensity))  %>%
  mutate(performance_plan_element = factor(performance_plan_element, levels = c(0, 1, 2, 3, 4), labels=c("Project lead", "Element 1", "Element 2", "Element 3", "Element 4"), ordered = TRUE)) %>%
  mutate(work_intensity = factor(work_intensity, levels=c("High", "Moderate", "Low", "Unknown"), ordered = TRUE))
           

pep <- unique(planning$staff)

activityPlan <- planning %>%
  arrange(activity_plan_nickname) %>% 
  select(activity_plan_nickname) %>%
  unique()
  
```

This report was generated on `r Sys.Date()`.

# Introduction

The information in this report represents the outstanding and upcoming work for PEP staff over the next 180 days. The intent of this information is to help support cross-project planning and communication.

# Work Due Soon

The following table lists the actions that will be due within the next 10 days in the DB.

```{r due_soon}
if (nrow(due_soon) == 0) {
  print("Hooray!! No upcoming deadlines!")
} else {
  knitr::kable(due_soon, format = "pipe", padding = 2)
}

```

# Overdue Work

The following table lists the actions that are overdue in the DB.

```{r overdue_work}
if (nrow(overdue) == 0) {
  print("Hooray!! No overdue work!")
} else {
  knitr::kable(overdue, format = "pipe", padding = 2)
}
```

# Planned Work by Action Lead

Today's date is shown as a grey vertical line on the figure.

```{r figures_byStaff, results = 'asis', fig.width = 10, fig.height = 8}

for (i in 1:length(pep)) {
  cat("\n\n## ", pep[i], "\n")
  
  figure_staff <- planning %>%
    filter(staff == pep[i]) %>%
    mutate(ylab = factor(ylab_staff, levels = rev(sort(ylab_staff)))) %>%
    arrange(project_activity, adjusted_end)
  
  fig <- ggplot(figure_staff, aes(x = adjusted_start, xend = adjusted_end, 
                     y = ylab, yend = ylab, 
                     color = performance_plan_element, alpha = work_intensity)) +
    geom_vline(aes(xintercept = Sys.Date()), col = "darkgray", linewidth = 1.5) +
    geom_segment(size = 5) +
    scale_color_manual(name = "Performance Plan", 
                       values = c("Project lead" = "deeppink4",
                                  "Element 1" = "chocolate1",
                                  "Element 2" = "darkgoldenrod2", 
                                  "Element 3" = "darkolivegreen4", 
                                  "Element 4" = "cadetblue")) +
    scale_alpha_manual(name = "Work Intensity", 
                       values = c("High" = 1, 
                                  "Moderate" = 0.4, 
                                  "Low" = 0.25, 
                                  "Unknown" = 0.1)) +
    scale_x_date(limits = c(Sys.Date() - 30, Sys.Date() + 150),
                 date_labels = "%Y-%m-%d", 
                 date_breaks ="1 month") + 
    labs(title = paste("Scheduled Roles for ", pep[i], sep = ""),
         x = "Date",
         y = "Role") +
    theme(plot.title.position = "plot") +
    theme(panel.grid.minor = element_blank()) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 
  
  print(fig)  
}
```

# Planned Work by Project

For actions where there is no start date assigned, an anticipated start date of 15 days before the planned end date has been estimated. Today's date is shown as a grey vertical line on the figure.

```{r figures_byProject, results = 'asis', fig.width = 10}

for (a in 1:nrow(activityPlan)) {
  cat("\n\n## ", activityPlan$activity_plan_nickname[a], "\n")
  
  component <- planning %>%
    filter(activity_plan_nickname == activityPlan$activity_plan_nickname[a]) %>%
    select(component_name) %>%
    arrange(component_name) %>%
    unique() 
  
  for (c in 1:nrow(component)) {
   cat("\n\n### ", component$component_name[c], "\n")
    
    project <- planning %>% 
      filter(activity_plan_nickname == activityPlan$activity_plan_nickname[a]) %>%
      filter(component_name == component$component_name[c]) %>% 
      select(project_name) %>%
      arrange(project_name) %>%
      unique()
    
    for (p in 1:nrow(project)) {
      figure_project <- planning %>% 
        filter(activity_plan_nickname == activityPlan$activity_plan_nickname[a]) %>%
        filter(component_name == component$component_name[c]) %>% 
        filter(project_name == project$project_name[p]) %>% 
        mutate(ylab = factor(ylab_project, levels = rev(sort(ylab_project)))) %>%

        arrange(desc(adjusted_end), ylab) %>%
        mutate(task_id = paste0("task_", stringr::str_pad(row_number(), 2, pad = "0")))
      
      fig <- ggplot(figure_project, aes(x = adjusted_start, xend = adjusted_end,
                                       y = task_id, yend = task_id, 
                                       color = performance_plan_element, alpha = work_intensity)) +
        geom_vline(aes(xintercept = Sys.Date()), col = "darkgray", linewidth = 1.5) +
        geom_segment(size = 5) +
        scale_color_manual(name = "Performance Plan", 
                       values = c("Project lead" = "deeppink4",
                                  "Element 1" = "chocolate1",
                                  "Element 2" = "darkgoldenrod2", 
                                  "Element 3" = "darkolivegreen4", 
                                  "Element 4" = "cadetblue")) +
        scale_alpha_manual(name = "Work Intensity", 
                       values = c("High" = 1, 
                                  "Moderate" = 0.4, 
                                  "Low" = 0.25, 
                                  "Unknown" = 0.1)) +
        scale_x_date(limits = c(Sys.Date() - 31, Sys.Date() + 150),
             date_labels = "%Y-%m-%d", 
             date_breaks ="1 month") + 
        scale_y_discrete(labels = figure_project$ylab) + 
        labs(title = project$project_name[p],
             x = "Date",
             y = "Role") +
        theme(plot.title.position = "plot") +
        theme(panel.grid.minor = element_blank()) +
        theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 
      
      print(fig)
    }
  }
}

```

# Manuscripts

The following tables list the actions associated with each planned manuscript.

```{r manuscripts, results = "asis"}
for (m in 1:length(manuscripts)) {
  cat("\n\n## ", substr(manuscripts[m], 13, nchar(manuscripts[m])), "\n")

  manuscript_subset <- work_manuscripts %>%
    filter(project_name == manuscripts[m]) %>%
    select(-project_name) %>%
    rename("Role" = role_name,
           "Staff" = staff,
           "Planned End Date" = planned_end_date,
           "Status" = role_status)

  print(knitr::kable(manuscript_subset, format = "pipe", padding = 2))
}
```


# Reports

The following tables list the actions associated with each planned report.

```{r reports, results = "asis"}
for (r in 1:length(reports)) {
  cat("\n\n## ", substr(reports[r], 10, nchar(reports[r])), "\n")

  report_subset <- work_reports %>%
    filter(project_name == reports[r]) %>%
    select(-project_name) %>%
    rename("Role" = role_name,
           "Staff" = staff,
           "Planned End Date" = planned_end_date,
           "Status" = role_status)

  print(knitr::kable(report_subset, format = "pipe", padding = 2))
}
```


# Performance Plan Elements (FY25)

The following tables list the roles for all PEP staff by performance plan element.

```{r elements, results = "asis"}
for (p in 1:length(pep)) {
  cat("\n\n## ", pep[p], "\n")

  elements <- work_fy %>%
    filter(staff == pep[p]) %>%
    arrange(performance_plan_element, project_activity) %>%
    select(performance_plan_element, project_activity, role_name, planned_start_date, planned_end_date, role_status, work_intensity) %>%
    rename("Element" = performance_plan_element,
           "Project" = project_activity,
           "Role" = role_name,
           "Planned Start Date" = planned_start_date,
           "Planned End Date" = planned_end_date, 
           "Status" = role_status,
           "Work Intensity" = work_intensity)

  print(knitr::kable(elements, format = "pipe", padding = 2))
}
```